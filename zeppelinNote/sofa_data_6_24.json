{"paragraphs":[{"text":"/** ------------------------------------------------------------------\n-- Title: Sequential Organ Failure Assessment (SOFA)\n-- This query extracts the sequential organ failure assessment (formally: sepsis-related organ failure assessment).\n-- This score is a measure of organ failure for patients in the ICU.\n-- The score is calculated on the 6hrs - 24hrs of first day of each ICU patients' stay.\n-- ------------------------------------------------------------------\n\n-- Reference for SOFA:\n--    Jean-Louis Vincent, Rui Moreno, Jukka Takala, Sheila Willatts, Arnaldo De Mendonça,\n--    Hajo Bruining, C. K. Reinhart, Peter M Suter, and L. G. Thijs.\n--    \"The SOFA (Sepsis-related Organ Failure Assessment) score to describe organ dysfunction/failure.\"\n--    Intensive care medicine 22, no. 7 (1996): 707-710.\n\n-- Variables used in SOFA:\n--  GCS, MAP, FiO2, Ventilation status (sourced from CHARTEVENTS)\n--  Creatinine, Bilirubin, FiO2, PaO2, Platelets (sourced from LABEVENTS)\n--  Dobutamine, Epinephrine, Norepinephrine (sourced from INPUTEVENTS_MV and INPUTEVENTS_CV)\n--  Urine output (sourced from OUTPUTEVENTS)\n\n-- Creates the vitals/labs/urine output/gcs/bloodgas for ICU patients using the window between 6hrs after ICU and 24hrs in ICU\n\n-- The following views required to run this query:\n--  1) uofirstday - generated by urine-output-first-day.sql\n--  2) vitalsfirstday - generated by vitals-first-day.sql\n--  3) gcsfirstday - generated by gcs-first-day.sql\n--  4) labsfirstday - generated by labs-first-day.sql\n--  5) bloodgasfirstdayarterial - generated by blood-gas-first-day-arterial.sql\n--  6) echodata - generated by echo-data.sql\n--  7) ventdurations - generated by ventilation-durations.sql\n\n-- Note:\n--  The score is calculated for *all* ICU patients, with the assumption that the user will subselect appropriate ICUSTAY_IDs.\n--  For example, the score is calculated for neonates, but it is likely inappropriate to actually use the score values for these patients.\n**/\n\nimport java.text.SimpleDateFormat\n\nimport org.apache.hadoop.conf.Configuration\nimport org.apache.hadoop.fs.FileSystem\nimport org.apache.spark.sql.{ SQLContext, SparkSession }\nimport org.apache.spark.{ SparkConf, SparkContext }\nimport org.apache.spark.mllib.linalg.{ DenseMatrix, Matrices, Vector, Vectors }\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.types._\n\nimport scala.io.Source\nval filepath = \"file:/mnt/host/home/mimicuser/project/rawdata/\"\n\nval output_filepath =  \"file:/mnt/host/home/mimicuser/project/\"\nval folder:String = \"data/sofa_6_24/\"\n\ndef writeOutput(df:DataFrame,filepath:String,folder:String,tableName:String){\n\tdf.coalesce(1).write.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").save(filepath+folder+tableName)\n}\n\ndef registerSchema(filename:String, tableName:String,tableSchema:StructType,filepath:String,sqlContext:SQLContext){\n\n    val table = sqlContext.read.\n      format(\"com.databricks.spark.csv\").\n      option(\"header\", \"true\").\n      schema(tableSchema).load(filepath+filename).cache()\n    table.registerTempTable(tableName.toUpperCase)\n}","dateUpdated":"2018-12-09T22:48:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678822_-602598039","id":"20181110-194322_643882231","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4262"},{"text":"val icustaysSchema = StructType(Array(StructField(\"ROW_ID\", IntegerType, true),\n    StructField(\"SUBJECT_ID\", IntegerType, true),\n    StructField(\"HADM_ID\", IntegerType, true),\n    StructField(\"ICUSTAY_ID\", IntegerType, true),\n    StructField(\"DBSOURCE\", StringType, true),\n    StructField(\"FIRST_CAREUNIT\", StringType, true),\n    StructField(\"LAST_CAREUNIT\", StringType, true),\n    StructField(\"FIRST_WARDID\", IntegerType, true),\n    StructField(\"LAST_WARDID\", IntegerType, true),\n    StructField(\"INTIME\", TimestampType, true),\n    StructField(\"OUTTIME\", TimestampType, true),\n    StructField(\"LOS\", DoubleType, true)))\n\nregisterSchema(\"ICUSTAYS.csv\",\"icustays\",icustaysSchema,filepath,sqlContext)\n\nval charteventsSchema = StructType(Array(StructField(\"ROW_ID\", IntegerType, true),\n    StructField(\"SUBJECT_ID\", IntegerType, true),\n    StructField(\"HADM_ID\", IntegerType, true),\n    StructField(\"ICUSTAY_ID\", IntegerType, true),\n    StructField(\"ITEMID\", IntegerType, true),\n    StructField(\"CHARTTIME\", TimestampType, true),\n    StructField(\"STORETIME\", TimestampType, true),\n    StructField(\"CGID\", IntegerType, true),\n    StructField(\"VALUE\", StringType, true),\n    StructField(\"VALUENUM\",DoubleType, true),\n    StructField(\"VALUEUOM\", StringType, true),\n    StructField(\"WARNING\", StringType, true),\n    StructField(\"ERROR\", StringType, true),\n    StructField(\"RESULTSTATUS\", StringType, true),\n    StructField(\"STOPPED\", StringType, true)))\n\nregisterSchema(\"CHARTEVENTS.csv\",\"chartevents\",charteventsSchema,filepath,sqlContext)\n\n\nval noteeventsSchema = StructType(Array(StructField(\"ROW_ID\", IntegerType, true),\n    StructField(\"SUBJECT_ID\", IntegerType, true),\n    StructField(\"HADM_ID\", IntegerType, true),\n    StructField(\"CHARTDATE\", DateType, true),\n    StructField(\"CHARTTIME\", StringType, true),\n    StructField(\"STORETIME\", TimestampType, true),\n    StructField(\"CATEGORY\", StringType, true),\n    StructField(\"DESCRIPTION\", StringType, true),\n    StructField(\"CGID\", IntegerType, true),\n    StructField(\"ISERROR\", StringType, true),\n    StructField(\"TEXT\", StringType, true)))\n\nregisterSchema(\"NOTEEVENTS_PROCESSED.csv\",\"noteevents\",noteeventsSchema,filepath,sqlContext)\n\nval inputeventsCvSchema = StructType(Array(StructField(\"ROW_ID\", IntegerType, true),\n    StructField(\"SUBJECT_ID\", IntegerType, true),\n    StructField(\"HADM_ID\", IntegerType, true),\n    StructField(\"ICUSTAY_ID\", IntegerType, true),\n    StructField(\"CHARTTIME\", TimestampType, true),\n    StructField(\"ITEMID\", IntegerType, true),\n    StructField(\"AMOUNT\", DoubleType, true),\n    StructField(\"AMOUNTUOM\", StringType, true),\n    StructField(\"RATE\", DoubleType, true),\n    StructField(\"RATEUOM\", StringType, true),\n    StructField(\"STORETIME\", TimestampType, true),\n    StructField(\"CGID\", IntegerType, true),\n    StructField(\"ORDERID\", IntegerType, true),\n    StructField(\"LINKORDERID\", IntegerType, true),\n    StructField(\"STOPPED\", StringType, true),\n    StructField(\"NEWBOTTLE\", StringType, true),\n    StructField(\"ORIGINALAMOUNT\", DoubleType, true),\n    StructField(\"ORIGINALAMOUNTUOM\", StringType, true),\n    StructField(\"ORIGINALROUTE\", StringType, true),\n    StructField(\"ORIGINALRATE\", DoubleType, true),\n    StructField(\"ORIGINALRATEUOM\", StringType, true),\n    StructField(\"ORIGINALSITE\", StringType, true)))\n\nregisterSchema(\"INPUTEVENTS_CV.csv\",\"inputevents_cv\",inputeventsCvSchema,filepath,sqlContext)\n\nval inputeventsMvSchema = StructType(Array(StructField(\"ROW_ID\", IntegerType, true),\n    StructField(\"SUBJECT_ID\", IntegerType, true),\n    StructField(\"HADM_ID\", IntegerType, true),\n    StructField(\"ICUSTAY_ID\", IntegerType, true),\n    StructField(\"STARTTIME\", TimestampType, true),\n    StructField(\"ENDTIME\", TimestampType, true),\n    StructField(\"ITEMID\", IntegerType, true),\n    StructField(\"AMOUNT\", DoubleType, true),\n    StructField(\"AMOUNTUOM\", StringType, true),\n    StructField(\"RATE\", DoubleType, true),\n    StructField(\"RATEUOM\", StringType, true),\n    StructField(\"STORETIME\", TimestampType, true),\n    StructField(\"CGID\", IntegerType, true),\n    StructField(\"ORDERID\", IntegerType, true),\n    StructField(\"LINKORDERID\", IntegerType, true),\n    StructField(\"ORDERCATEGORYNAME\", StringType, true),\n    StructField(\"SECONDARYORDERCATEGORYNAME\", StringType, true),\n    StructField(\"ORDERCOMPONENTTYPEDESCRIPTION\", StringType, true),\n    StructField(\"ORDERCATEGORYDESCRIPTION\", StringType, true),\n    StructField(\"PATIENTWEIGHT\", DoubleType, true),\n    StructField(\"TOTALAMOUNT\", DoubleType, true),\n    StructField(\"TOTALAMOUNTUOM\", StringType, true),\n    StructField(\"ISOPENBAG\", IntegerType, true),\n    StructField(\"CONTINUEINNEXTDEPT\", IntegerType, true),\n    StructField(\"CANCELREASON\", IntegerType, true),\n    StructField(\"STATUSDESCRIPTION\", StringType, true),\n    StructField(\"COMMENTS_EDITEDBY\", StringType, true),\n    StructField(\"COMMENTS_CANCELEDBY\", StringType, true),\n    StructField(\"COMMENTS_DATE\", TimestampType, true),\n    StructField(\"ORIGINALAMOUNT\", DoubleType, true),\n    StructField(\"ORIGINALRATE\", DoubleType, true)))\n\nregisterSchema(\"INPUTEVENTS_MV.csv\",\"inputevents_mv\",inputeventsMvSchema,filepath,sqlContext)\n\nval labeventsSchema = StructType(Array(StructField(\"ROW_ID\", IntegerType, true),\n    StructField(\"SUBJECT_ID\", IntegerType, true),\n    StructField(\"HADM_ID\", IntegerType, true),\n    StructField(\"ITEMID\", IntegerType, true),\n    StructField(\"CHARTTIME\", TimestampType, true),\n    StructField(\"VALUE\", StringType, true),\n    StructField(\"VALUENUM\", StringType, true),\n    StructField(\"VALUEUOM\", StringType, true),\n    StructField(\"FLAG\", StringType, true)))\n\nregisterSchema(\"LABEVENTS.csv\",\"labevents\",labeventsSchema,filepath,sqlContext)\n\nval outputeventsSchema = StructType(Array(StructField(\"ROW_ID\", IntegerType, true),\n    StructField(\"SUBJECT_ID\", IntegerType, true),\n    StructField(\"HADM_ID\", IntegerType, true),\n    StructField(\"ICUSTAY_ID\", IntegerType, true),\n    StructField(\"CHARTTIME\", TimestampType, true),\n    StructField(\"ITEMID\", IntegerType, true),\n    StructField(\"VALUE\", DoubleType, true),\n    StructField(\"VALUEUOM\", StringType, true),\n    StructField(\"STORETIME\", TimestampType, true),\n    StructField(\"CGID\", IntegerType, true),\n    StructField(\"STOPPED\", StringType, true),\n    StructField(\"NEWBOTTLE\", StringType, true),\n    StructField(\"ISERROR\", IntegerType, true)))\n\nregisterSchema(\"OUTPUTEVENTS.csv\",\"outputevents\",outputeventsSchema,filepath,sqlContext)","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678822_-602598039","id":"20181110-194337_1669843738","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4263"},{"text":"\nval echodata = sqlContext.sql(\"\"\"\n\n\n SELECT ROW_ID\n  , subject_id, hadm_id\n  , chartdate\n   -- charttime is always null for echoes..\n  -- however, the time is available in the echo text, e.g.:\n  -- , substring(ne.text, 'Date/Time: [\\[\\]0-9*-]+ at ([0-9:]+)') as TIMESTAMP\n-- we can therefore impute it and re-create charttime\n, CAST(CONCAT(regexp_extract(ne.text, 'Date/Time: \\\\[\\\\*\\\\*([0-9*-]+)\\\\*\\\\*\\\\] at [0-9:]+ NEWLINE'),' ',regexp_extract(ne.text, 'Date/Time: [\\\\[\\\\]0-9*-]+ at ([0-9:]+) NEWLINE')) AS timestamp) as charttime,\n\n-- explanation of below substring:\n  --  'Indication: ' - matched verbatim\n  --  (.*?) - match any character\n  --  \\n - the end of the line\n  -- substring only returns the item in ()s\n-- note: the '?' makes it non-greedy. if you exclude it, it matches until it reaches the *last* \\n\nregexp_extract(ne.text, 'Indication: (.*?) NEWLINE') as Indication,\n\n-- sometimes numeric values contain de-id text, e.g. [** Numeric Identifier **]\n-- this removes that text\ncase\n    when regexp_extract(ne.text, 'Height: \\\\(in\\\\) (.*?) NEWLINE') like '%*%'\n        then null\n    else cast(regexp_extract(ne.text, 'Height: \\\\(in\\\\) (.*?) NEWLINE') as FLOAT)\nend as Height,\ncase\n    when regexp_extract(ne.text, 'Weight \\\\(lb\\\\): (.*?) NEWLINE') like '%*%'\n        then null\n    else cast(regexp_extract(ne.text, 'Weight \\\\(lb\\\\): (.*?) NEWLINE') as FLOAT)\nend as Weight,\ncase\n    when regexp_extract(ne.text, 'BSA \\\\(m2\\\\): (.*?) m2 NEWLINE') like '%*%'\n        then null\n    else cast(regexp_extract(ne.text, 'BSA \\\\(m2\\\\): (.*?) m2 NEWLINE') as FLOAT)\nend as BSA,\nregexp_extract(ne.text, 'BP \\\\(mm Hg\\\\): (.*?) NEWLINE') as BP,\ncase\n    when regexp_extract(ne.text, 'BP \\\\(mm Hg\\\\): ([0-9]+)/[0-9]+? NEWLINE') like '%*%'\n        then null\n    else cast(regexp_extract(ne.text, 'BP \\\\(mm Hg\\\\): ([0-9]+)/[0-9]+? NEWLINE') as FLOAT)\nend as BPSys,\ncase\n    when regexp_extract(ne.text, 'BP \\\\(mm Hg\\\\): [0-9]+/([0-9]+?) NEWLINE') like '%*%'\n        then null\n    else cast(regexp_extract(ne.text, 'BP \\\\(mm Hg\\\\): [0-9]+/([0-9]+?) NEWLINE') as FLOAT)\nend as BPDias,\ncase\n    when regexp_extract(ne.text, 'HR \\\\(bpm\\\\): ([0-9]+?) NEWLINE') like '%*%'\n        then null\n    else cast(regexp_extract(ne.text, 'HR \\\\(bpm\\\\): ([0-9]+?) NEWLINE') as FLOAT)\nend as HR,\nregexp_extract(ne.text, 'Status: (.*?) NEWLINE') as Status, \nregexp_extract(ne.text, 'Test: (.*?) NEWLINE') as Test, \nregexp_extract(ne.text, 'Doppler: (.*?) NEWLINE') as Doppler, \nregexp_extract(ne.text,'Contrast: (.*?) NEWLINE') as Contrast, \nregexp_extract(ne.text, 'Technical Quality: (.*?) NEWLINE') as TechnicalQuality\nFROM noteevents ne where category = 'Echo'\n\"\"\")\nechodata.registerTempTable(\"echodata\")\nwriteOutput(echodata,output_filepath,folder,\"echodata\")","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678822_-602598039","id":"20181111-153510_385045064","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4264"},{"text":"/** get the weight of ICU patients **/\nval weightfirstday = sqlContext.sql(\"\"\"\n with wt AS (\n    SELECT ie.icustay_id\n    -- ensure weight is measured in kg\n    , avg(CASE\n        WHEN itemid IN (762, 763, 3723, 3580, 226512)\n          THEN valuenum\n        -- convert lbs to kgs\n        WHEN itemid IN (3581)\n          THEN valuenum * 0.45359237\n        WHEN itemid IN (3582)\n          THEN valuenum * 0.0283495231\n        ELSE null\n      END) AS weight\n\n    from icustays ie\n    left join chartevents c\n    on ie.icustay_id = c.icustay_id\n    WHERE valuenum IS NOT NULL\n    AND itemid IN\n    (\n    762, 763, 3723, 3580,                     -- Weight Kg\n    3581,                                     -- Weight lb\n    3582,                                     -- Weight oz\n    226512 -- Metavision: Admission Weight (Kg)\n    )\n    AND valuenum != 0\n    and charttime between  (ie.intime + interval '6' hour) and (ie.intime + interval '1' day)\n    -- exclude rows marked as error\n    and  (c.error = 0 OR c.error IS NULL)\n   \n   group by ie.icustay_id\n )\n , echo2 as(\n    select ie.icustay_id, avg(weight * 0.45359237) as weight\n    from icustays ie\n    left join echodata echo\n      on ie.hadm_id = echo.hadm_id\n      and echo.charttime > ie.intime - interval '7' day\n      and echo.charttime < ie.intime + + interval '6' hour\n    group by ie.icustay_id\n)\nselect ie.icustay_id, coalesce(wt.weight,ec.weight) as weight\nfrom icustays ie\n    left join wt\n        on ie.icustay_id = wt.icustay_id\n    left join echo2 ec\n        on ie.icustay_id = ec.icustay_id\n\n \"\"\")\n weightfirstday.registerTempTable(\"weightfirstday\")\nwriteOutput(weightfirstday,output_filepath,folder,\"weight_firstday\")\n","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678822_-602598039","id":"20181201-213618_838211932","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4265"},{"text":"val bloodgasfirstday = sqlContext.sql(\"\"\"\nwith bloodgas_pvt as (\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n      , case\n        when itemid = 50800 then 'SPECIMEN'\n        when itemid = 50801 then 'AADO2'\n        when itemid = 50802 then 'BASEEXCESS'\n        when itemid = 50803 then 'BICARBONATE'\n        when itemid = 50804 then 'TOTALCO2'\n        when itemid = 50805 then 'CARBOXYHEMOGLOBIN'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50808 then 'CALCIUM'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 50812 then 'INTUBATED'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 50814 then 'METHEMOGLOBIN'\n        when itemid = 50815 then 'O2FLOW'\n        when itemid = 50816 then 'FIO2'\n        when itemid = 50817 then 'SO2' -- OXYGENSATURATION\n        when itemid = 50818 then 'PCO2'\n        when itemid = 50819 then 'PEEP'\n        when itemid = 50820 then 'PH'\n        when itemid = 50821 then 'PO2'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50823 then 'REQUIREDO2'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50825 then 'TEMPERATURE'\n        when itemid = 50826 then 'TIDALVOLUME'\n        when itemid = 50827 then 'VENTILATIONRATE'\n        when itemid = 50828 then 'VENTILATOR'\n        else null\n        end as label\n        , charttime\n        , value\n        -- add in some sanity checks on the values\n        , case\n          when valuenum <= 0 then null\n          when itemid = 50810 and valuenum > 100 then null -- hematocrit\n          when itemid = 50816 and valuenum > 100 then null -- FiO2\n          when itemid = 50817 and valuenum > 100 then null -- O2 sat\n          when itemid = 50815 and valuenum >  70 then null -- O2 flow\n          when itemid = 50821 and valuenum > 800 then null -- PO2\n           -- conservative upper limit\n        else valuenum\n        end as valuenum\n    from icustays ie\n    left join labevents le\n      on le.subject_id = ie.subject_id and le.hadm_id = ie.hadm_id\n      and le.charttime between (ie.intime + interval '6' hour) and (ie.intime + interval '1' day)\n      and le.ITEMID in\n      -- blood gases\n      (\n        50800, 50801, 50802, 50803, 50804, 50805, 50806, 50807, 50808, 50809\n        , 50810, 50811, 50812, 50813, 50814, 50815, 50816, 50817, 50818, 50819\n        , 50820, 50821, 50822, 50823, 50824, 50825, 50826, 50827, 50828\n        , 51545\n      )\n)\nselect pvt.SUBJECT_ID, pvt.HADM_ID, pvt.ICUSTAY_ID, pvt.CHARTTIME\n, max(case when label = 'SPECIMEN' then value else null end) as SPECIMEN\n, max(case when label = 'AADO2' then valuenum else null end) as AADO2\n, max(case when label = 'BASEEXCESS' then valuenum else null end) as BASEEXCESS\n, max(case when label = 'BICARBONATE' then valuenum else null end) as BICARBONATE\n, max(case when label = 'TOTALCO2' then valuenum else null end) as TOTALCO2\n, max(case when label = 'CARBOXYHEMOGLOBIN' then valuenum else null end) as CARBOXYHEMOGLOBIN\n, max(case when label = 'CHLORIDE' then valuenum else null end) as CHLORIDE\n, max(case when label = 'CALCIUM' then valuenum else null end) as CALCIUM\n, max(case when label = 'GLUCOSE' then valuenum else null end) as GLUCOSE\n, max(case when label = 'HEMATOCRIT' then valuenum else null end) as HEMATOCRIT\n, max(case when label = 'HEMOGLOBIN' then valuenum else null end) as HEMOGLOBIN\n, max(case when label = 'INTUBATED' then valuenum else null end) as INTUBATED\n, max(case when label = 'LACTATE' then valuenum else null end) as LACTATE\n, max(case when label = 'METHEMOGLOBIN' then valuenum else null end) as METHEMOGLOBIN\n, max(case when label = 'O2FLOW' then valuenum else null end) as O2FLOW\n, max(case when label = 'FIO2' then valuenum else null end) as FIO2\n, max(case when label = 'SO2' then valuenum else null end) as SO2 -- OXYGENSATURATION\n, max(case when label = 'PCO2' then valuenum else null end) as PCO2\n, max(case when label = 'PEEP' then valuenum else null end) as PEEP\n, max(case when label = 'PH' then valuenum else null end) as PH\n, max(case when label = 'PO2' then valuenum else null end) as PO2\n, max(case when label = 'POTASSIUM' then valuenum else null end) as POTASSIUM\n, max(case when label = 'REQUIREDO2' then valuenum else null end) as REQUIREDO2\n, max(case when label = 'SODIUM' then valuenum else null end) as SODIUM\n, max(case when label = 'TEMPERATURE' then valuenum else null end) as TEMPERATURE\n, max(case when label = 'TIDALVOLUME' then valuenum else null end) as TIDALVOLUME\n, max(case when label = 'VENTILATIONRATE' then valuenum else null end) as VENTILATIONRATE\n, max(case when label = 'VENTILATOR' then valuenum else null end) as VENTILATOR\nfrom\nbloodgas_pvt as pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id, pvt.CHARTTIME\n\"\"\")\nbloodgasfirstday.registerTempTable(\"bloodgasfirstday\")\nwriteOutput(bloodgasfirstday,output_filepath,folder,\"bloodgas_firstday\")\n\n","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678828_-606445528","id":"20181111-163727_971368976","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4266"},{"text":"val bloodgasfirstdayarterial = sqlContext.sql(\"\"\"\n with bloodgasfirstdayarterial_stg_spo2 as (\n  select SUBJECT_ID, HADM_ID, ICUSTAY_ID, CHARTTIME\n    -- max here is just used to group SpO2 by charttime\n    , max(case when valuenum <= 0 or valuenum > 100 then null else valuenum end) as SpO2\n  from CHARTEVENTS\n  -- o2 sat\n  where ITEMID in\n  (\n    646 -- SpO2\n  , 220277 -- O2 saturation pulseoxymetry\n  )\n  group by SUBJECT_ID, HADM_ID, ICUSTAY_ID, CHARTTIME\n), bloodgasfirstdayarterial_stg_fio2 as (\n  select SUBJECT_ID, HADM_ID, ICUSTAY_ID, CHARTTIME\n    -- pre-process the FiO2s to ensure they are between 21-100%\n    , max(\n        case\n          when itemid = 223835\n            then case\n              when valuenum > 0 and valuenum <= 1\n                then valuenum * 100\n              -- improperly input data - looks like O2 flow in litres\n              when valuenum > 1 and valuenum < 21\n                then null\n              when valuenum >= 21 and valuenum <= 100\n                then valuenum\n              else null end -- unphysiological\n        when itemid in (3420, 3422)\n        -- all these values are well formatted\n            then valuenum\n        when itemid = 190 and valuenum > 0.20 and valuenum < 1\n        -- well formatted but not in %\n            then valuenum * 100\n      else null end\n    ) as fio2_chartevents\n  from CHARTEVENTS\n  where ITEMID in\n  (\n    3420 -- FiO2\n  , 190 -- FiO2 set\n  , 223835 -- Inspired O2 Fraction (FiO2)\n  , 3422 -- FiO2 [measured]\n  )\n  group by SUBJECT_ID, HADM_ID, ICUSTAY_ID, CHARTTIME\n), bloodgasfirstdayarterial_stg2 as (\n  select bg.*\n    , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s1.charttime DESC) as lastRowSpO2\n    , s1.spo2\n  from bloodgasfirstday bg\n  left join bloodgasfirstdayarterial_stg_spo2 s1\n    -- same patient\n    on  bg.icustay_id = s1.icustay_id\n    -- spo2 occurred at most 2 hours before this blood gas\n    and s1.charttime between bg.charttime - interval '2' hour and bg.charttime\n  where bg.po2 is not null\n), bloodgasfirstdayarterial_stg3 as (\n  select bg.*\n  , ROW_NUMBER() OVER (partition by bg.icustay_id, bg.charttime order by s2.charttime DESC) as lastRowFiO2\n  , s2.fio2_chartevents\n  -- create our specimen prediction\n  ,  1/(1+exp(-(-0.02544\n  +    0.04598 * po2\n  + coalesce(-0.15356 * spo2             , -0.15356 *   97.49420 +    0.13429)\n  + coalesce( 0.00621 * fio2_chartevents ,  0.00621 *   51.49550 +   -0.24958)\n  + coalesce( 0.10559 * hemoglobin       ,  0.10559 *   10.32307 +    0.05954)\n  + coalesce( 0.13251 * so2              ,  0.13251 *   93.66539 +   -0.23172)\n  + coalesce(-0.01511 * pco2             , -0.01511 *   42.08866 +   -0.01630)\n  + coalesce( 0.01480 * fio2             ,  0.01480 *   63.97836 +   -0.31142)\n  + coalesce(-0.00200 * aado2            , -0.00200 *  442.21186 +   -0.01328)\n  + coalesce(-0.03220 * bicarbonate      , -0.03220 *   22.96894 +   -0.06535)\n  + coalesce( 0.05384 * totalco2         ,  0.05384 *   24.72632 +   -0.01405)\n  + coalesce( 0.08202 * lactate          ,  0.08202 *    3.06436 +    0.06038)\n  + coalesce( 0.10956 * ph               ,  0.10956 *    7.36233 +   -0.00617)\n  + coalesce( 0.00848 * o2flow           ,  0.00848 *    7.59362 +   -0.35803)\n  ))) as SPECIMEN_PROB\nfrom bloodgasfirstdayarterial_stg2 bg\nleft join bloodgasfirstdayarterial_stg_fio2 s2\n  -- same patient\n  on  bg.icustay_id = s2.icustay_id\n  -- fio2 occurred at most 4 hours before this blood gas\n  and s2.charttime between bg.charttime - interval '4' hour and bg.charttime\n  where bg.lastRowSpO2 = 1 -- only the row with the most recent SpO2 (if no SpO2 found lastRowSpO2 = 1)\n)\nselect subject_id, hadm_id,\nicustay_id, charttime\n, SPECIMEN -- raw data indicating sample type, only present 80% of the time\n-- prediction of specimen for missing data\n, case\n      when SPECIMEN is not null then SPECIMEN\n      when SPECIMEN_PROB > 0.75 then 'ART'\n    else null end as SPECIMEN_PRED\n, SPECIMEN_PROB\n-- oxygen related parameters\n, SO2, spo2 -- note spo2 is from chartevents\n, PO2, PCO2\n, fio2_chartevents, FIO2\n, AADO2\n-- also calculate AADO2\n, case\n    when  PO2 is not null\n      and pco2 is not null\n      and coalesce(FIO2, fio2_chartevents) is not null\n     -- multiple by 100 because FiO2 is in a % but should be a fraction\n      then (coalesce(FIO2, fio2_chartevents)/100) * (760 - 47) - (pco2/0.8) - po2\n    else null\n  end as AADO2_calc\n, case\n    when PO2 is not null and coalesce(FIO2, fio2_chartevents) is not null\n     -- multiply by 100 because FiO2 is in a % but should be a fraction\n      then 100*PO2/(coalesce(FIO2, fio2_chartevents))\n    else null\n  end as PaO2FiO2\n-- acid-base parameters\n, PH, BASEEXCESS\n, BICARBONATE, TOTALCO2\n-- blood count parameters\n, HEMATOCRIT\n, HEMOGLOBIN\n, CARBOXYHEMOGLOBIN\n, METHEMOGLOBIN\n-- chemistry\n, CHLORIDE, CALCIUM\n, TEMPERATURE\n, POTASSIUM, SODIUM\n, LACTATE\n, GLUCOSE\n-- ventilation stuff that's sometimes input\n, INTUBATED, TIDALVOLUME, VENTILATIONRATE, VENTILATOR\n, PEEP, O2Flow\n, REQUIREDO2\nfrom bloodgasfirstdayarterial_stg3 as stg3\nwhere lastRowFiO2 = 1 -- only the most recent FiO2\n-- restrict it to *only* arterial samples\nand (SPECIMEN = 'ART' or SPECIMEN_PROB > 0.75)\norder by icustay_id, charttime\n\"\"\")\nbloodgasfirstdayarterial.registerTempTable(\"bloodgasfirstdayarterial\")\nwriteOutput(bloodgasfirstdayarterial,output_filepath,folder,\"bloodgas_firstdayarterial\")","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678828_-606445528","id":"20181111-223504_881477437","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4267"},{"text":"val ventdurations = sqlContext.sql(\"\"\"\n  with ventsettings as (select icustay_id, charttime\n     -- case statement determining whether it is an instance of mech vent\n    , max(\n      case\n        when itemid = '' or value = '' then 0 -- can't have null values\n        when itemid = 720 and value != 'Other/Remarks' THEN 1  -- VentTypeRecorded\n        when itemid = 467 and value = 'Ventilator' THEN 1 -- O2 delivery device == ventilator\n        when itemid = 648 and value = 'Intubated/trach' THEN 1 -- Speech = intubated\n        when itemid in\n          (\n          445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n          , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n          , 218,436,535,444,459,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean/Neg insp force (\"RespPressure\")\n          , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n          , 543 -- PlateauPressure\n          , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n          , 60,437,505,506,686,220339,224700 -- PEEP\n          , 3459 -- high pressure relief\n          , 501,502,503,224702 -- PCV\n          , 223,667,668,669,670,671,672 -- TCPCV\n          , 157,158,1852,3398,3399,3400,3401,3402,3403,3404,8382,227809,227810 -- ETT\n          , 224701 -- PSVlevel\n          )\n          THEN 1\n        else 0\n      end\n      ) as MechVent\n      , max(\n        case when itemid = '' or value = ''  then 0\n          when itemid = 640 and value = 'Extubated' then 1\n          when itemid = 640 and value = 'Self Extubation' then 1\n        else 0\n        end\n        )\n        as Extubated\n      , max(\n        case when itemid = '' or value = '' then 0\n          when itemid = 640 and value = 'Self Extubation' then 1\n        else 0\n        end\n        )\n        as SelfExtubated\n  from chartevents ce\n  where value <> ''\n  and itemid in\n  (\n      640 -- extubated\n      , 648 -- speech\n      , 720 -- vent type\n      , 467 -- O2 delivery device\n      , 445, 448, 449, 450, 1340, 1486, 1600, 224687 -- minute volume\n      , 639, 654, 681, 682, 683, 684,224685,224684,224686 -- tidal volume\n      , 218,436,535,444,459,224697,224695,224696,224746,224747 -- High/Low/Peak/Mean/Neg insp force (\"RespPressure\")\n      , 221,1,1211,1655,2000,226873,224738,224419,224750,227187 -- Insp pressure\n      , 543 -- PlateauPressure\n      , 5865,5866,224707,224709,224705,224706 -- APRV pressure\n      , 60,437,505,506,686,220339,224700 -- PEEP\n      , 3459 -- high pressure relief\n      , 501,502,503,224702 -- PCV\n      , 223,667,668,669,670,671,672 -- TCPCV\n      , 157,158,1852,3398,3399,3400,3401,3402,3403,3404,8382,227809,227810 -- ETT\n      , 224701 -- PSVlevel\n  )\n  and icustay_id is not null\n  group by icustay_id, charttime\n  ), vd1 as (\n    select icustay_id\n    -- this carries over the previous charttime which had a mechanical ventilation event\n    , case\n        when MechVent=1 then\n          LAG(CHARTTIME, 1) OVER (partition by icustay_id, MechVent order by charttime)\n        else null\n      end as charttime_lag\n    , charttime\n    , MechVent\n    , Extubated\n    , SelfExtubated\n    -- if this is a mechanical ventilation event, we calculate the time since the last event\n    , case\n        -- if the current observation indicates mechanical ventilation is present\n        when MechVent=1 then\n        -- copy over the previous charttime where mechanical ventilation was present\n          unix_timestamp(CHARTTIME) - (LAG(unix_timestamp(CHARTTIME), 1) OVER (partition by icustay_id, MechVent order by charttime))\n        else null\n      end as ventduration\n    -- now we determine if the current mech vent event is a \"new\", i.e. they've just been intubated\n    , case\n      -- if there is an extubation flag, we mark any subsequent ventilation as a new ventilation event\n        when Extubated = 1 then 0 -- extubation is *not* a new ventilation event, the *subsequent* row is\n        when\n          LAG(Extubated,1)\n          OVER\n          (\n          partition by icustay_id, case when MechVent=1 or Extubated=1 then 1 else 0 end\n          order by charttime\n          )\n          = 1 then 1\n          -- if there is less than 8 hours between vent settings, we do not treat this as a new ventilation event\n        when (unix_timestamp(CHARTTIME) - (LAG(unix_timestamp(CHARTTIME), 1) OVER (partition by icustay_id, MechVent order by charttime))) <= 28800\n          then 0\n      else 1\n      end as newvent\n  FROM\n    ventsettings\n  ), vd2 as (\n    select vd1.*\n-- create a cumulative sum of the instances of new ventilation\n-- this results in a monotonic integer assigned to each instance of ventilation\n, case when MechVent=1 or Extubated = 1 then\n    SUM( newvent )\n    OVER ( partition by icustay_id order by charttime )\n  else '' end\n  as ventnum\nfrom vd1\n-- now we can isolate to just rows with ventilation settings/extubation settings\n-- (before we had rows with extubation flags)\n-- this removes any null values for newvent\nwhere\n  MechVent = 1 or Extubated = 1\n  )\nselect icustay_id, ventnum\n  , min(charttime) as starttime\n  , max(charttime) as endtime\nfrom vd2\ngroup by icustay_id, ventnum\norder by icustay_id, ventnum\n\"\"\")\n\nventdurations.registerTempTable(\"ventdurations\")\nwriteOutput(ventdurations,output_filepath,folder,\"ventdurations\")","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678828_-606445528","id":"20181111-163830_1459341744","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4268"},{"text":"val gcsfirstday = sqlContext.sql(\"\"\"\nwith gcs_base_pvt as (\n    select l.ICUSTAY_ID\n  -- merge the ITEMIDs so that the pivot applies to both metavision/carevue data\n  , case\n      when l.ITEMID in (723,223900) then 723\n      when l.ITEMID in (454,223901) then 454\n      when l.ITEMID in (184,220739) then 184\n      else l.ITEMID end\n    as ITEMID\n  -- convert the data into a number, reserving a value of 0 for ET/Trach\n  , case\n      -- endotrach/vent is assigned a value of 0, later parsed specially\n      when l.ITEMID = 723 and l.VALUE = '1.0 ET/Trach' then 0 -- carevue\n      when l.ITEMID = 223900 and l.VALUE = 'No Response-ETT' then 0 -- metavision\n      else VALUENUM\n      end\n    as VALUENUM\n  , l.CHARTTIME\n  from CHARTEVENTS l\n  -- get intime for charttime subselection\n  inner join icustays b\n    on l.icustay_id = b.icustay_id\n  -- Isolate the desired GCS variables\n  where l.ITEMID in\n  (\n    -- 198 -- GCS\n    -- GCS components, CareVue\n    184, 454, 723\n    -- GCS components, Metavision\n    , 223900, 223901, 220739\n  )\n  -- Only get data for the first 6 hours\n  and l.charttime between ( b.intime+ interval '6' hour) and (b.intime +  + interval  '1' day)\n),  gcs_base as (\n  SELECT pvt.ICUSTAY_ID, pvt.charttime\n  -- Easier names - note we coalesced Metavision and CareVue IDs below\n  , max(case when pvt.itemid = 454 then pvt.valuenum else null end) as GCSMotor\n  , max(case when pvt.itemid = 723 then pvt.valuenum else null end) as GCSVerbal\n  , max(case when pvt.itemid = 184 then pvt.valuenum else null end) as GCSEyes\n  -- If verbal was set to 0 in the below select, then this is an intubated patient\n  , case\n      when max(case when pvt.itemid = 723 then pvt.valuenum else null end) = 0\n    then 1\n    else 0\n    end as EndoTrachFlag\n  , ROW_NUMBER ()\n          OVER (PARTITION BY pvt.ICUSTAY_ID ORDER BY pvt.charttime ASC) as rn\n  FROM gcs_base_pvt as pvt\n  group by pvt.ICUSTAY_ID, pvt.charttime\n  ), gcs as (\n    select b.*\n  , b2.GCSVerbal as GCSVerbalPrev\n  , b2.GCSMotor as GCSMotorPrev\n  , b2.GCSEyes as GCSEyesPrev\n  -- Calculate GCS, factoring in special case when they are intubated and prev vals\n  -- note that the coalesce are used to implement the following if:\n  --  if current value exists, use it\n  --  if previous value exists, use it\n  --  otherwise, default to normal\n  , case\n      -- replace GCS during sedation with 15\n      when b.GCSVerbal = 0\n        then 15\n      when b.GCSVerbal is null and b2.GCSVerbal = 0\n        then 15\n      -- if previously they were intub, but they aren't now, do not use previous GCS values\n      when b2.GCSVerbal = 0\n        then\n            coalesce(b.GCSMotor,6)\n          + coalesce(b.GCSVerbal,5)\n          + coalesce(b.GCSEyes,4)\n      -- otherwise, add up score normally, imputing previous value if none available at current time\n      else\n            coalesce(b.GCSMotor,coalesce(b2.GCSMotor,6))\n          + coalesce(b.GCSVerbal,coalesce(b2.GCSVerbal,5))\n          + coalesce(b.GCSEyes,coalesce(b2.GCSEyes,4))\n      end as GCS\n  from gcs_base b\n  -- join to itself within 6 hours to get previous value\n  left join gcs_base b2\n    on b.ICUSTAY_ID = b2.ICUSTAY_ID and b.rn = b2.rn+1 and b2.charttime > b.charttime - interval '6' hour\n), gcsfinal as (\n  select gcs.*\n  -- This sorts the data by GCS, so rn=1 is the the lowest GCS values to keep\n  , ROW_NUMBER ()\n          OVER (PARTITION BY gcs.ICUSTAY_ID\n                ORDER BY gcs.GCS\n               ) as IsMinGCS\n  from gcs)\nselect ie.SUBJECT_ID, ie.HADM_ID, ie.ICUSTAY_ID\n-- The minimum GCS is determined by the above row partition, we only join if IsMinGCS=1\n, GCS as MinGCS\n, coalesce(GCSMotor,GCSMotorPrev) as GCSMotor\n, coalesce(GCSVerbal,GCSVerbalPrev) as GCSVerbal\n, coalesce(GCSEyes,GCSEyesPrev) as GCSEyes\n, EndoTrachFlag as EndoTrachFlag\n-- subselect down to the cohort of eligible patients\nfrom icustays ie\nleft join gcsfinal gs\n  on ie.ICUSTAY_ID = gs.ICUSTAY_ID and gs.IsMinGCS = 1\nORDER BY ie.ICUSTAY_ID\n\"\"\")\ngcsfirstday.registerTempTable(\"gcsfirstday\")\nwriteOutput(gcsfirstday,output_filepath,folder,\"gcs_firstday\")","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678828_-606445528","id":"20181111-164626_1525025441","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4269"},{"text":"/** This query pivots the vital signs for the first 24 hours of a patient's stay\n-- Vital signs include heart rate, blood pressure, respiration rate, and temperature\n**/\nval vitalsfirstday = sqlContext.sql(\"\"\"\nwith vital_pvt as (\nselect ie.subject_id, ie.hadm_id, ie.icustay_id\n  , case\n    when itemid in (211,220045) and valuenum > 0 and valuenum < 300 then 1 -- HeartRate\n    when itemid in (51,442,455,6701,220179,220050) and valuenum > 0 and valuenum < 400 then 2 -- SysBP\n    when itemid in (8368,8440,8441,8555,220180,220051) and valuenum > 0 and valuenum < 300 then 3 -- DiasBP\n    when itemid in (456,52,6702,443,220052,220181,225312) and valuenum > 0 and valuenum < 300 then 4 -- MeanBP\n    when itemid in (615,618,220210,224690) and valuenum > 0 and valuenum < 70 then 5 -- RespRate\n    when itemid in (223761,678) and valuenum > 70 and valuenum < 120  then 6 -- TempF, converted to degC in valuenum call\n    when itemid in (223762,676) and valuenum > 10 and valuenum < 50  then 6 -- TempC\n    when itemid in (646,220277) and valuenum > 0 and valuenum <= 100 then 7 -- SpO2\n    when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum > 0 then 8 -- Glucose\n\n    else null end as VitalID\n    -- convert F to C\n  , case when itemid in (223761,678) then (valuenum-32)/1.8 else valuenum end as valuenum\n\n  from icustays ie\n  left join chartevents ce\n  on ie.subject_id = ce.subject_id and ie.hadm_id = ce.hadm_id and ie.icustay_id = ce.icustay_id\n  and ce.charttime between   (ie.intime + interval '6' hour) and (ie.intime + interval '1' day)\n \n  -- exclude rows marked as error\n  -- and ce.error IS DISTINCT FROM 1\n  WHERE (ce.error = 0 OR ce.error IS NULL) and \n  ce.itemid in\n  (\n  -- HEART RATE\n  211, --\"Heart Rate\"\n  220045, --\"Heart Rate\"\n\n  -- Systolic/diastolic\n\n  51, --\tArterial BP [Systolic]\n  442, --\tManual BP [Systolic]\n  455, --\tNBP [Systolic]\n  6701, --\tArterial BP #2 [Systolic]\n  220179, --\tNon Invasive Blood Pressure systolic\n  220050, --\tArterial Blood Pressure systolic\n\n  8368, --\tArterial BP [Diastolic]\n  8440, --\tManual BP [Diastolic]\n  8441, --\tNBP [Diastolic]\n  8555, --\tArterial BP #2 [Diastolic]\n  220180, --\tNon Invasive Blood Pressure diastolic\n  220051, --\tArterial Blood Pressure diastolic\n\n\n  -- MEAN ARTERIAL PRESSURE\n  456, --\"NBP Mean\"\n  52, --\"Arterial BP Mean\"\n  6702, --\tArterial BP Mean #2\n  443, --\tManual BP Mean(calc)\n  220052, --\"Arterial Blood Pressure mean\"\n  220181, --\"Non Invasive Blood Pressure mean\"\n  225312, --\"ART BP mean\"\n\n  -- RESPIRATORY RATE\n  618,--\tRespiratory Rate\n  615,--\tResp Rate (Total)\n  220210,--\tRespiratory Rate\n  224690, --\tRespiratory Rate (Total)\n\n\n  -- SPO2, peripheral\n  646, 220277,\n\n  -- GLUCOSE, both lab and fingerstick\n  807,--\tFingerstick Glucose\n  811,--\tGlucose (70-105)\n  1529,--\tGlucose\n  3745,--\tBloodGlucose\n  3744,--\tBlood Glucose\n  225664,--\tGlucose finger stick\n  220621,--\tGlucose (serum)\n  226537,--\tGlucose (whole blood)\n\n  -- TEMPERATURE\n  223762, -- \"Temperature Celsius\"\n  676,\t-- \"Temperature C\"\n  223761, -- \"Temperature Fahrenheit\"\n  678 --\t\"Temperature F\"\n\n  )\n)\nSELECT pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n-- Easier names\n, min(case when VitalID = 1 then valuenum else null end) as HeartRate_Min\n, max(case when VitalID = 1 then valuenum else null end) as HeartRate_Max\n, avg(case when VitalID = 1 then valuenum else null end) as HeartRate_Mean\n, min(case when VitalID = 2 then valuenum else null end) as SysBP_Min\n, max(case when VitalID = 2 then valuenum else null end) as SysBP_Max\n, avg(case when VitalID = 2 then valuenum else null end) as SysBP_Mean\n, min(case when VitalID = 3 then valuenum else null end) as DiasBP_Min\n, max(case when VitalID = 3 then valuenum else null end) as DiasBP_Max\n, avg(case when VitalID = 3 then valuenum else null end) as DiasBP_Mean\n, min(case when VitalID = 4 then valuenum else null end) as MeanBP_Min\n, max(case when VitalID = 4 then valuenum else null end) as MeanBP_Max\n, avg(case when VitalID = 4 then valuenum else null end) as MeanBP_Mean\n, min(case when VitalID = 5 then valuenum else null end) as RespRate_Min\n, max(case when VitalID = 5 then valuenum else null end) as RespRate_Max\n, avg(case when VitalID = 5 then valuenum else null end) as RespRate_Mean\n, min(case when VitalID = 6 then valuenum else null end) as TempC_Min\n, max(case when VitalID = 6 then valuenum else null end) as TempC_Max\n, avg(case when VitalID = 6 then valuenum else null end) as TempC_Mean\n, min(case when VitalID = 7 then valuenum else null end) as SpO2_Min\n, max(case when VitalID = 7 then valuenum else null end) as SpO2_Max\n, avg(case when VitalID = 7 then valuenum else null end) as SpO2_Mean\n, min(case when VitalID = 8 then valuenum else null end) as Glucose_Min\n, max(case when VitalID = 8 then valuenum else null end) as Glucose_Max\n, avg(case when VitalID = 8 then valuenum else null end) as Glucose_Mean\n\nFROM vital_pvt as pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\"\"\")\nvitalsfirstday.registerTempTable(\"vitalsfirstday\")\n\nwriteOutput(vitalsfirstday,output_filepath,folder,\"vitals_firstday\")","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678829_-606830277","id":"20181113-005534_1992425097","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4270"},{"text":" val labsfirstday = sqlContext.sql(\"\"\"\nwith lab_pvt as (\n  select ie.subject_id, ie.hadm_id, ie.icustay_id\n  -- here we assign labels to ITEMIDs\n  -- this also fuses together multiple ITEMIDs containing the same data\n  , case\n        when itemid = 50868 then 'ANION GAP'\n        when itemid = 50862 then 'ALBUMIN'\n        WHEN itemid = 51144 THEN 'BANDS'\n        when itemid = 50882 then 'BICARBONATE'\n        when itemid = 50885 then 'BILIRUBIN'\n        when itemid = 50912 then 'CREATININE'\n        when itemid = 50806 then 'CHLORIDE'\n        when itemid = 50902 then 'CHLORIDE'\n        when itemid = 50809 then 'GLUCOSE'\n        when itemid = 50931 then 'GLUCOSE'\n        when itemid = 50810 then 'HEMATOCRIT'\n        when itemid = 51221 then 'HEMATOCRIT'\n        when itemid = 50811 then 'HEMOGLOBIN'\n        when itemid = 51222 then 'HEMOGLOBIN'\n        when itemid = 50813 then 'LACTATE'\n        when itemid = 51265 then 'PLATELET'\n        when itemid = 50822 then 'POTASSIUM'\n        when itemid = 50971 then 'POTASSIUM'\n        when itemid = 51275 then 'PTT'\n        when itemid = 51237 then 'INR'\n        when itemid = 51274 then 'PT'\n        when itemid = 50824 then 'SODIUM'\n        when itemid = 50983 then 'SODIUM'\n        when itemid = 51006 then 'BUN'\n        when itemid = 51300 then 'WBC'\n        when itemid = 51301 then 'WBC'\n      else null\n    end as label\n  , -- add in some sanity checks on the values\n  -- the where clause below requires all valuenum to be > 0, so these are only upper limit checks\n    case\n      when itemid = 50862 and valuenum >    10 then null -- g/dL 'ALBUMIN'\n      when itemid = 50868 and valuenum > 10000 then null -- mEq/L 'ANION GAP'\n      WHEN itemid = 51144 and valuenum <     0 THEN null -- immature band forms, %\n      WHEN itemid = 51144 and valuenum > 100 THEN null -- immature band forms, %\n      when itemid = 50882 and valuenum > 10000 then null -- mEq/L 'BICARBONATE'\n      when itemid = 50885 and valuenum >   150 then null -- mg/dL 'BILIRUBIN'\n      when itemid = 50806 and valuenum > 10000 then null -- mEq/L 'CHLORIDE'\n      when itemid = 50902 and valuenum > 10000 then null -- mEq/L 'CHLORIDE'\n      when itemid = 50912 and valuenum >   150 then null -- mg/dL 'CREATININE'\n      when itemid = 50809 and valuenum > 10000 then null -- mg/dL 'GLUCOSE'\n      when itemid = 50931 and valuenum > 10000 then null -- mg/dL 'GLUCOSE'\n      when itemid = 50810 and valuenum >   100 then null -- % 'HEMATOCRIT'\n      when itemid = 51221 and valuenum >   100 then null -- % 'HEMATOCRIT'\n      when itemid = 50811 and valuenum >    50 then null -- g/dL 'HEMOGLOBIN'\n      when itemid = 51222 and valuenum >    50 then null -- g/dL 'HEMOGLOBIN'\n      when itemid = 50813 and valuenum >    50 then null -- mmol/L 'LACTATE'\n      when itemid = 51265 and valuenum > 10000 then null -- K/uL 'PLATELET'\n      when itemid = 50822 and valuenum >    30 then null -- mEq/L 'POTASSIUM'\n      when itemid = 50971 and valuenum >    30 then null -- mEq/L 'POTASSIUM'\n      when itemid = 51275 and valuenum >   150 then null -- sec 'PTT'\n      when itemid = 51237 and valuenum >    50 then null -- 'INR'\n      when itemid = 51274 and valuenum >   150 then null -- sec 'PT'\n      when itemid = 50824 and valuenum >   200 then null -- mEq/L == mmol/L 'SODIUM'\n      when itemid = 50983 and valuenum >   200 then null -- mEq/L == mmol/L 'SODIUM'\n      when itemid = 51006 and valuenum >   300 then null -- 'BUN'\n      when itemid = 51300 and valuenum >  1000 then null -- 'WBC'\n      when itemid = 51301 and valuenum >  1000 then null -- 'WBC'\n    else le.valuenum\n    end as valuenum\n  from icustays ie\n  left join labevents le\n    on le.subject_id = ie.subject_id and le.hadm_id = ie.hadm_id\n    and le.charttime between  (ie.intime + interval '6' hour) and (ie.intime + interval '1' day)\n    and le.ITEMID in\n    (\n      -- comment is: LABEL | CATEGORY | FLUID | NUMBER OF ROWS IN LABEVENTS\n      50868, -- ANION GAP | CHEMISTRY | BLOOD | 769895\n      50862, -- ALBUMIN | CHEMISTRY | BLOOD | 146697\n      51144, -- BANDS - hematology\n      50882, -- BICARBONATE | CHEMISTRY | BLOOD | 780733\n      50885, -- BILIRUBIN, TOTAL | CHEMISTRY | BLOOD | 238277\n      50912, -- CREATININE | CHEMISTRY | BLOOD | 797476\n      50902, -- CHLORIDE | CHEMISTRY | BLOOD | 795568\n      50806, -- CHLORIDE, WHOLE BLOOD | BLOOD GAS | BLOOD | 48187\n      50931, -- GLUCOSE | CHEMISTRY | BLOOD | 748981\n      50809, -- GLUCOSE | BLOOD GAS | BLOOD | 196734\n      51221, -- HEMATOCRIT | HEMATOLOGY | BLOOD | 881846\n      50810, -- HEMATOCRIT, CALCULATED | BLOOD GAS | BLOOD | 89715\n      51222, -- HEMOGLOBIN | HEMATOLOGY | BLOOD | 752523\n      50811, -- HEMOGLOBIN | BLOOD GAS | BLOOD | 89712\n      50813, -- LACTATE | BLOOD GAS | BLOOD | 187124\n      51265, -- PLATELET COUNT | HEMATOLOGY | BLOOD | 778444\n      50971, -- POTASSIUM | CHEMISTRY | BLOOD | 845825\n      50822, -- POTASSIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 192946\n      51275, -- PTT | HEMATOLOGY | BLOOD | 474937\n      51237, -- INR(PT) | HEMATOLOGY | BLOOD | 471183\n      51274, -- PT | HEMATOLOGY | BLOOD | 469090\n      50983, -- SODIUM | CHEMISTRY | BLOOD | 808489\n      50824, -- SODIUM, WHOLE BLOOD | BLOOD GAS | BLOOD | 71503\n      51006, -- UREA NITROGEN | CHEMISTRY | BLOOD | 791925\n      51301, -- WHITE BLOOD CELLS | HEMATOLOGY | BLOOD | 753301\n      51300  -- WBC COUNT | HEMATOLOGY | BLOOD | 2371\n    )\n    and valuenum is not null and valuenum > 0 -- lab values cannot be 0 and cannot be negative\n)\nselect\n  pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n  , min(case when label = 'ANION GAP' then  CAST(valuenum as DOUBLE) else null end) as ANIONGAP_min\n  , max(case when label = 'ANION GAP' then  CAST(valuenum as DOUBLE) else null end) as ANIONGAP_max\n  , min(case when label = 'ALBUMIN' then  CAST(valuenum as DOUBLE) else null end) as ALBUMIN_min\n  , max(case when label = 'ALBUMIN' then  CAST(valuenum as DOUBLE) else null end) as ALBUMIN_max\n  , min(CASE WHEN label = 'BANDS' THEN  CAST(valuenum as DOUBLE) ELSE null END) as BANDS_min\n  , max(CASE WHEN label = 'BANDS' THEN  CAST(valuenum as DOUBLE) ELSE null END) as BANDS_max\n  , min(case when label = 'BICARBONATE' then  CAST(valuenum as DOUBLE) else null end) as BICARBONATE_min\n  , max(case when label = 'BICARBONATE' then  CAST(valuenum as DOUBLE) else null end) as BICARBONATE_max\n  , min(case when label = 'BILIRUBIN' then  CAST(valuenum as DOUBLE) else null end) as BILIRUBIN_min\n  , max(case when label = 'BILIRUBIN' then  CAST(valuenum as DOUBLE) else null end) as BILIRUBIN_max\n  , min(case when label = 'CREATININE' then  CAST(valuenum as DOUBLE) else null end) as CREATININE_min\n  , max(case when label = 'CREATININE' then  CAST(valuenum as DOUBLE) else null end) as CREATININE_max\n  , min(case when label = 'CHLORIDE' then  CAST(valuenum as DOUBLE) else null end) as CHLORIDE_min\n  , max(case when label = 'CHLORIDE' then  CAST(valuenum as DOUBLE) else null end) as CHLORIDE_max\n  , min(case when label = 'GLUCOSE' then  CAST(valuenum as DOUBLE) else null end) as GLUCOSE_min\n  , max(case when label = 'GLUCOSE' then  CAST(valuenum as DOUBLE) else null end) as GLUCOSE_max\n  , min(case when label = 'HEMATOCRIT' then  CAST(valuenum as DOUBLE) else null end) as HEMATOCRIT_min\n  , max(case when label = 'HEMATOCRIT' then  CAST(valuenum as DOUBLE) else null end) as HEMATOCRIT_max\n  , min(case when label = 'HEMOGLOBIN' then valuenum else null end) as HEMOGLOBIN_min\n  , max(case when label = 'HEMOGLOBIN' then valuenum else null end) as HEMOGLOBIN_max\n  , min(case when label = 'LACTATE' then valuenum else null end) as LACTATE_min\n  , max(case when label = 'LACTATE' then valuenum else null end) as LACTATE_max\n  , min(case when label = 'PLATELET' then CAST(valuenum as DOUBLE) else null end) as PLATELET_min\n  , max(case when label = 'PLATELET' then CAST(valuenum as DOUBLE) else null end) as PLATELET_max\n  , min(case when label = 'POTASSIUM' then valuenum else null end) as POTASSIUM_min\n  , max(case when label = 'POTASSIUM' then valuenum else null end) as POTASSIUM_max\n  , min(case when label = 'PTT' then valuenum else null end) as PTT_min\n  , max(case when label = 'PTT' then valuenum else null end) as PTT_max\n  , min(case when label = 'INR' then valuenum else null end) as INR_min\n  , max(case when label = 'INR' then valuenum else null end) as INR_max\n  , min(case when label = 'PT' then valuenum else null end) as PT_min\n  , max(case when label = 'PT' then valuenum else null end) as PT_max\n  , min(case when label = 'SODIUM' then valuenum else null end) as SODIUM_min\n  , max(case when label = 'SODIUM' then valuenum else null end) as SODIUM_max\n  , min(case when label = 'BUN' then valuenum else null end) as BUN_min\n  , max(case when label = 'BUN' then valuenum else null end) as BUN_max\n  , min(case when label = 'WBC' then valuenum else null end) as WBC_min\n  , max(case when label = 'WBC' then valuenum else null end) as WBC_max\nfrom lab_pvt as pvt\ngroup by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\norder by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\"\"\")\nlabsfirstday.registerTempTable(\"labsfirstday\")\nwriteOutput(labsfirstday,output_filepath,folder,\"labs_firstday\")\n ","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678829_-606830277","id":"20181113-125129_515931196","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4271"},{"text":"val uofirstday = sqlContext.sql(\"\"\"\nselect\n  -- patient identifiers\n  ie.subject_id, ie.hadm_id, ie.icustay_id\n\n  -- volumes associated with urine output ITEMIDs\n  , sum(\n      -- we consider input of GU irrigant as a negative volume\n      case\n        when oe.itemid = 227488 and oe.value > 0 then -1*oe.value\n        else oe.value\n    end) as UrineOutput\nfrom icustays ie\n-- Join to the outputevents table to get urine output\nleft join outputevents oe\n-- join on all patient identifiers\non ie.subject_id = oe.subject_id and ie.hadm_id = oe.hadm_id and ie.icustay_id = oe.icustay_id\n-- and ensure the data occurs during the first day\nand oe.charttime between (ie.intime + interval '6' hour) and (ie.intime + interval '1' day) -- first ICU day  \nwhere itemid in\n(\n-- these are the most frequently occurring urine output observations in CareVue\n40055, -- \"Urine Out Foley\"\n43175, -- \"Urine .\"\n40069, -- \"Urine Out Void\"\n40094, -- \"Urine Out Condom Cath\"\n40715, -- \"Urine Out Suprapubic\"\n40473, -- \"Urine Out IleoConduit\"\n40085, -- \"Urine Out Incontinent\"\n40057, -- \"Urine Out Rt Nephrostomy\"\n40056, -- \"Urine Out Lt Nephrostomy\"\n40405, -- \"Urine Out Other\"\n40428, -- \"Urine Out Straight Cath\"\n40086,--\tUrine Out Incontinent\n40096, -- \"Urine Out Ureteral Stent #1\"\n40651, -- \"Urine Out Ureteral Stent #2\"\n\n-- these are the most frequently occurring urine output observations in MetaVision\n226559, -- \"Foley\"\n226560, -- \"Void\"\n226561, -- \"Condom Cath\"\n226584, -- \"Ileoconduit\"\n226563, -- \"Suprapubic\"\n226564, -- \"R Nephrostomy\"\n226565, -- \"L Nephrostomy\"\n226567, --\tStraight Cath\n226557, -- R Ureteral Stent\n226558, -- L Ureteral Stent\n227488, -- GU Irrigant Volume In\n227489  -- GU Irrigant/Urine Volume Out\n)\ngroup by ie.subject_id, ie.hadm_id, ie.icustay_id\norder by ie.subject_id, ie.hadm_id, ie.icustay_id\n\"\"\")\n\nuofirstday.registerTempTable(\"uofirstday\")\n\nwriteOutput(uofirstday,output_filepath,folder,\"uo_firstday\")","dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678829_-606830277","id":"20181113-125532_924064180","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4272"},{"dateUpdated":"2018-12-09T22:47:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544395678829_-606830277","id":"20181113-125811_816048343","dateCreated":"2018-12-09T22:47:58+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4273"}],"name":"sofa_data_6_24-git","id":"2DWQ6TNBY","angularObjects":{"2DZ8HS1YE:shared_process":[],"2DYX74K5K:shared_process":[],"2DWU7PBFE:shared_process":[],"2DX87ZJWG:shared_process":[],"2DXVZKPZD:shared_process":[],"2DX1Z1P6S:shared_process":[],"2DVVBVC7J:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}